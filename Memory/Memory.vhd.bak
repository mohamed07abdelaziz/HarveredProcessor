LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Memory IS
   PORT (
      clk : IN STD_LOGIC;
      reset : IN STD_LOGIC;
      -------------------------------------------------------------------- pipeline signals in ----------------------------------------------------------------------------
      mBlock : IN STD_LOGIC_VECTOR(11 DOWNTO 0); -- [0]LDIMM->1bit , [1]SPControll->1bit, [2]CallSignal->1bit ,[3]memRead ->1bit,[4]FlagSignal->1bit,[5]oldMemWrite->1bit,[6]returnSignal->1 bit,[7]SPSRC->1bit,[8] swapSignal->1bit,[9] restore flag ->1bit, [10] AluSP ->1bit ,[11] NeworOldPC ->1bit
      writeBackBlock : IN STD_LOGIC_VECTOR(4 DOWNTO 0); -- [0]Regwrite_EX->1bit ,[1][2]regWrite ->2bits 1 is req1 and 2 is reg2 ,[3] OutportEnable ->1bit,[4] megToReg ->1bit   note 8lbn reg1 hya same as in index  0 
      InputPortEnable : IN STD_LOGIC;
       I_PC: IN STD_LOGIC;
      pcPlus1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      flagReg : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      bitProtect : IN STD_LOGIC;
      dataAlu : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      readData1 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      PC : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      readData2 : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      writeAddresses : IN STD_LOGIC_VECTOR(6 DOWNTO 0); -- 2 addresses
      immediate : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      enable : IN STD_LOGIC;
      rest : IN STD_LOGIC;
      ---------------------------------------------------------------------------- pipeline signals out ----------------------------------------------------------------------------
      outMemoryOut : OUT STD_LOGIC_VECTOR(187 DOWNTO 0);
      SpsrcWB:IN STD_LOGIC;
       SPSElWB: IN STD_LOGIC;
      OutMem:OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      -------------------------------------------------------------------- Forwarding signals out ----------------------------------------------------------------------------
      regwriteEX : OUT STD_LOGIC;
      rdstExcuteAddress : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)

   );

END ENTITY Memory;
ARCHITECTURE impOfMemory OF Memory IS
   COMPONENT my_nDFF IS
      generic (N : INTEGER := 187);
      PORT (
         Clk, Rst : IN STD_LOGIC;
         d : IN STD_LOGIC_VECTOR(187 DOWNTO 0);
         q : OUT STD_LOGIC_VECTOR(187 DOWNTO 0);
         enable : IN STD_LOGIC
      );
   END COMPONENT my_nDFF;

   COMPONENT spAlu IS
      PORT (
         aluSp : IN STD_LOGIC;
         clk, reset : IN STD_LOGIC;
         spSrc : IN STD_LOGIC;
         SPOut : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
      );
   END COMPONENT spAlu;

   COMPONENT Ram IS
      PORT (
         clk : IN STD_LOGIC;
         writeEnable : IN STD_LOGIC;
         readEnable : IN STD_LOGIC;
         rest : IN STD_LOGIC;
         Address : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
         dataIn : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
         dataOut : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
         spControl : IN STD_LOGIC

      );
   END COMPONENT Ram;

   SIGNAL SP : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL oM1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL oM2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL oM3 : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL oM4 : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL oM5 : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL memWrite : STD_LOGIC;
   SIGNAL outMemory : STD_LOGIC_VECTOR(31 DOWNTO 0);

   SIGNAL write_Back : STD_LOGIC_VECTOR(63 DOWNTO 0);
   SIGNAL dataAluSignal : STD_LOGIC_VECTOR(63 DOWNTO 0);
   SIGNAL spOutSig : STD_LOGIC_VECTOR(31 DOWNTO 0);
   signal dataOut : STD_LOGIC_VECTOR(187 DOWNTO 0);
BEGIN
   ----------------------------------------------------------use spAlu component-------------------------------------------
   spAlu1 : spAlu PORT MAP(SPSElWB, clk, reset, SpsrcWB, spOutSig);
   --mux 1
   oM1 <= dataAlu WHEN mBlock(1) = '0'  ---SPCOntrol
      ELSE
      SP;

   --mux 2
   oM2 <= pcPlus1 WHEN mBlock(11) = '0' --PCornewPC
      ELSE
      PC;

   --mux 3
   oM3 <= oM1 WHEN mBlock(0) = '0' --LDIMM
      ELSE
      immediate;

   --mux 4
   oM4 <= readData1 WHEN mBlock(2) = '0'  --Call Signal
      ELSE
      oM2;

   --mux 5
   oM5 <= oM4 WHEN mBlock(4) = '0' --FlagSignal
      ELSE
      flagReg;

   memWrite <= NOT bitProtect AND mBlock(5); --MemWrite

   Ram1 : Ram PORT MAP(clk, memWrite, mBlock(3), rest, oM3, oM5, outMemory, mBlock(1));--MemWrite,SPCOntrol,MemRead
OutMem<= outMemory;

   write_Back <= x"00000000" & outMemory; --64 bits
   dataAluSignal <= dataAlu & readData2; --64 bits
   -------------------------------------------------------------------- pipeline signals out ----------------------------------------------------------------------------
   dataOut <= I_PC&writeAddresses& dataAluSignal& rest& InputPortEnable& write_Back& spOutSig&InputPortEnable & writeBackBlock&mBlock ;     
   --        0->11          12->16        17              18->49       50->112     113       114       115->179       180->186
   PipeLine : my_nDFF GENERIC map (188) PORT MAP(clk, reset, dataOut, outMemoryOut, enable);
   -------------------------------------------------------------------- Forwarding signals out ----------------------------------------------------------------------------
   -- rdstExcuteAddress<=
   -- regwriteEX<=writeBackBlock(0);

END impOfMemory;